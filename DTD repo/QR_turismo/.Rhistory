# %>%
#   addCircleMarkers(
#     data = places_list_sf %>% # Places lejanos a una cuenta comercial
#       dplyr::filter(user_ratings_total > 3) %>%
#       dplyr::rowwise() %>%
#       dplyr::filter(
#         !(any(str_detect(types, regex("tourist_attraction|park|local_government_office|museum|school|church|place_of_worship", ignore_case = TRUE))) &
#             !any(str_detect(types, regex("store", ignore_case = TRUE))))
#       ) %>%
#       dplyr::filter(sin_cuenta == "FALSE", sociedad == "TRUE") %>%
#       dplyr::ungroup(),
#     radius = 5,
#     color = ~colorNumeric(palette = c("gold", "orange", "red", "brown"), domain = places_list_sf$dist)(dist),  # Conditional color based on 'intersect'
#     fillOpacity = 1,
#     stroke = FALSE,
#     popup = ~paste0("<strong>", name, "</strong><br><a href='", url_maps, "' target='_blank'>", url_maps, "</a>")
#   ) %>%
addCircleMarkers(
data = locaciones_restringidas,
radius = 5,
color = "magenta",
fillOpacity = 1,
stroke = FALSE,
popup = ~paste0(tipo, ": ", nombre)
) %>%
addCircleMarkers(
data = comercio_sf,
radius = 5,
color = "grey",
fillOpacity = 0.1,
stroke = FALSE,
popup = ~nombre_fantasia
)
places_list_sf$sociedad <- ifelse(places_list_sf$dist_sociedad < 30, TRUE, FALSE)# Variable categórica para clasificar cercanos a lugar restringido
places_list_sf <- places_list_sf %>% # solo los que interseccionan con sociedad y NO son gastronómicos, se marcan TRUE en "sociedad_clean"
dplyr::mutate(
gastronomico = str_detect(types, regex("food|restaurant|bar", ignore_case = TRUE)),
sociedad_clean = ifelse(sociedad == "TRUE" & gastronomico == "FALSE", "TRUE",
ifelse(sociedad == "TRUE" & gastronomico == "TRUE", "FALSE", "FALSE")
)
)
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(
data = manzanas_sf,
color = ~colorFactor(palette = "Set1", domain = manzanas_sf$objectid_1)(objectid_1),
weight = 2,
fillOpacity = 0.1
) %>%
addPolygons(
data = propiedad_horizontal,
color = "grey",
weight = 2,
fillOpacity = 0
) %>%
addCircleMarkers(
data = places_list_sf %>% # Places cercanos a un lugar restringido NO GASTRONOMICOS (en azul los que zafan de la clasificación en "sociedad_clean")
dplyr::filter(user_ratings_total > 3) %>%
dplyr::rowwise() %>%
dplyr::filter(
!(any(str_detect(types, regex("tourist_attraction|park|local_government_office|museum|school|church|place_of_worship", ignore_case = TRUE))) &
!any(str_detect(types, regex("store", ignore_case = TRUE))))
) %>%
dplyr::filter(sin_cuenta == "TRUE", sociedad_clean == "TRUE") %>%
dplyr::ungroup(),
radius = 5,
color = "blue",
fillOpacity = 1,
stroke = FALSE,
popup = ~paste0("<strong>", name, "</strong><br><a href='", url_maps, "' target='_blank'>", url_maps, "</a>")
) %>%
addCircleMarkers(
data = comercio_sf,
radius = 5,
color = "grey",
fillOpacity = 0.1,
stroke = FALSE,
popup = ~nombre_fantasia
) %>%
# %>%
#   addCircleMarkers(
#     data = places_list_sf %>% # Places cercanos a una cuenta comercial
#       dplyr::filter(user_ratings_total > 3) %>%
#       dplyr::rowwise() %>%
#       dplyr::filter(
#         !(any(str_detect(types, regex("tourist_attraction|park|local_government_office|museum|school|church|place_of_worship", ignore_case = TRUE))) &
#             !any(str_detect(types, regex("store", ignore_case = TRUE))))
#       ) %>%
#       dplyr::filter(sin_cuenta == "TRUE") %>%
#       dplyr::ungroup(),
#     radius = 5,
#     color = ~"green",  # Conditional color based on 'intersect'
#     fillOpacity = 1,
#     stroke = FALSE,
#     popup = ~paste0("<strong>", name, "</strong><br><a href='", url_maps, "' target='_blank'>", url_maps, "</a>")
#   )
# %>%
#   addCircleMarkers(
#     data = places_list_sf %>% # Places lejanos a una cuenta comercial
#       dplyr::filter(user_ratings_total > 3) %>%
#       dplyr::rowwise() %>%
#       dplyr::filter(
#         !(any(str_detect(types, regex("tourist_attraction|park|local_government_office|museum|school|church|place_of_worship", ignore_case = TRUE))) &
#             !any(str_detect(types, regex("store", ignore_case = TRUE))))
#       ) %>%
#       dplyr::filter(sin_cuenta == "FALSE", sociedad == "TRUE") %>%
#       dplyr::ungroup(),
#     radius = 5,
#     color = ~colorNumeric(palette = c("gold", "orange", "red", "brown"), domain = places_list_sf$dist)(dist),  # Conditional color based on 'intersect'
#     fillOpacity = 1,
#     stroke = FALSE,
#     popup = ~paste0("<strong>", name, "</strong><br><a href='", url_maps, "' target='_blank'>", url_maps, "</a>")
#   ) %>%
addCircleMarkers(
data = locaciones_restringidas,
radius = 5,
color = "magenta",
fillOpacity = 1,
stroke = FALSE,
popup = ~paste0(tipo, ": ", nombre)
) %>%
addCircleMarkers(
data = comercio_sf,
radius = 5,
color = "grey",
fillOpacity = 0.1,
stroke = FALSE,
popup = ~nombre_fantasia
)
places_list_sf$sociedad <- ifelse(places_list_sf$dist_sociedad < 20, TRUE, FALSE)# Variable categórica para clasificar cercanos a lugar restringido
places_list_sf <- places_list_sf %>% # solo los que interseccionan con sociedad y NO son gastronómicos, se marcan TRUE en "sociedad_clean"
dplyr::mutate(
gastronomico = str_detect(types, regex("food|restaurant|bar", ignore_case = TRUE)),
sociedad_clean = ifelse(sociedad == "TRUE" & gastronomico == "FALSE", "TRUE",
ifelse(sociedad == "TRUE" & gastronomico == "TRUE", "FALSE", "FALSE")
)
)
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(
data = manzanas_sf,
color = ~colorFactor(palette = "Set1", domain = manzanas_sf$objectid_1)(objectid_1),
weight = 2,
fillOpacity = 0.1
) %>%
addPolygons(
data = propiedad_horizontal,
color = "grey",
weight = 2,
fillOpacity = 0
) %>%
addCircleMarkers(
data = places_list_sf %>% # Places cercanos a un lugar restringido NO GASTRONOMICOS (en azul los que zafan de la clasificación en "sociedad_clean")
dplyr::filter(user_ratings_total > 3) %>%
dplyr::rowwise() %>%
dplyr::filter(
!(any(str_detect(types, regex("tourist_attraction|park|local_government_office|museum|school|church|place_of_worship", ignore_case = TRUE))) &
!any(str_detect(types, regex("store", ignore_case = TRUE))))
) %>%
dplyr::filter(sin_cuenta == "TRUE", sociedad_clean == "TRUE") %>%
dplyr::ungroup(),
radius = 5,
color = "blue",
fillOpacity = 1,
stroke = FALSE,
popup = ~paste0("<strong>", name, "</strong><br><a href='", url_maps, "' target='_blank'>", url_maps, "</a>")
) %>%
addCircleMarkers(
data = comercio_sf,
radius = 5,
color = "grey",
fillOpacity = 0.1,
stroke = FALSE,
popup = ~nombre_fantasia
) %>%
# %>%
#   addCircleMarkers(
#     data = places_list_sf %>% # Places cercanos a una cuenta comercial
#       dplyr::filter(user_ratings_total > 3) %>%
#       dplyr::rowwise() %>%
#       dplyr::filter(
#         !(any(str_detect(types, regex("tourist_attraction|park|local_government_office|museum|school|church|place_of_worship", ignore_case = TRUE))) &
#             !any(str_detect(types, regex("store", ignore_case = TRUE))))
#       ) %>%
#       dplyr::filter(sin_cuenta == "TRUE") %>%
#       dplyr::ungroup(),
#     radius = 5,
#     color = ~"green",  # Conditional color based on 'intersect'
#     fillOpacity = 1,
#     stroke = FALSE,
#     popup = ~paste0("<strong>", name, "</strong><br><a href='", url_maps, "' target='_blank'>", url_maps, "</a>")
#   )
# %>%
#   addCircleMarkers(
#     data = places_list_sf %>% # Places lejanos a una cuenta comercial
#       dplyr::filter(user_ratings_total > 3) %>%
#       dplyr::rowwise() %>%
#       dplyr::filter(
#         !(any(str_detect(types, regex("tourist_attraction|park|local_government_office|museum|school|church|place_of_worship", ignore_case = TRUE))) &
#             !any(str_detect(types, regex("store", ignore_case = TRUE))))
#       ) %>%
#       dplyr::filter(sin_cuenta == "FALSE", sociedad == "TRUE") %>%
#       dplyr::ungroup(),
#     radius = 5,
#     color = ~colorNumeric(palette = c("gold", "orange", "red", "brown"), domain = places_list_sf$dist)(dist),  # Conditional color based on 'intersect'
#     fillOpacity = 1,
#     stroke = FALSE,
#     popup = ~paste0("<strong>", name, "</strong><br><a href='", url_maps, "' target='_blank'>", url_maps, "</a>")
#   ) %>%
addCircleMarkers(
data = locaciones_restringidas,
radius = 5,
color = "magenta",
fillOpacity = 1,
stroke = FALSE,
popup = ~paste0(tipo, ": ", nombre)
) %>%
addCircleMarkers(
data = comercio_sf,
radius = 5,
color = "grey",
fillOpacity = 0.1,
stroke = FALSE,
popup = ~nombre_fantasia
)
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(
data = manzanas_sf,
color = ~colorFactor(palette = "Set1", domain = manzanas_sf$objectid_1)(objectid_1),
weight = 2,
fillOpacity = 0.1
) %>%
addPolygons(
data = propiedad_horizontal,
color = "grey",
weight = 2,
fillOpacity = 0
) %>%
addCircleMarkers(
data = places_list_sf %>% # Places cercanos a una cuenta comercial
dplyr::filter(user_ratings_total > 3) %>%
dplyr::rowwise() %>%
dplyr::filter(
!(any(str_detect(types, regex("tourist_attraction|park|local_government_office|museum|school|church|place_of_worship", ignore_case = TRUE))) &
!any(str_detect(types, regex("store", ignore_case = TRUE))))
) %>%
dplyr::filter(sin_cuenta == "FALSE") %>%
dplyr::ungroup(),
radius = 5,
color = ~"green",  # Conditional color based on 'intersect'
fillOpacity = 1,
stroke = FALSE,
popup = ~paste0("<strong>", name, "</strong><br><a href='", url_maps, "' target='_blank'>", url_maps, "</a>")
) %>%
addCircleMarkers(
data = places_list_sf %>% # Places lejanos a una cuenta comercial
dplyr::filter(user_ratings_total > 3) %>%
dplyr::rowwise() %>%
dplyr::filter(
!(any(str_detect(types, regex("tourist_attraction|park|local_government_office|museum|school|church|place_of_worship", ignore_case = TRUE))) &
!any(str_detect(types, regex("store", ignore_case = TRUE))))
) %>%
dplyr::filter(sin_cuenta == "TRUE", sociedad_clean == "FALSE") %>% # probables inhabilitados solo los sin_cuenta y los que NO interseccionan con sociedad (o son gastronomicos)
dplyr::ungroup(),
radius = 5,
color = ~colorNumeric(palette = c("gold", "orange", "red", "brown"), domain = places_list_sf$dist)(dist),  # Conditional color based on 'intersect'
fillOpacity = 1,
stroke = FALSE,
popup = ~paste0("<strong>", name, "</strong><br><a href='", url_maps, "' target='_blank'>", url_maps, "</a>")
) %>%
addCircleMarkers(
data = places_list_sf %>% # Places lejanos a una cuenta comercial
dplyr::filter(user_ratings_total > 3) %>%
dplyr::rowwise() %>%
dplyr::filter(
!(any(str_detect(types, regex("tourist_attraction|park|local_government_office|museum|school|church|place_of_worship", ignore_case = TRUE))) &
!any(str_detect(types, regex("store", ignore_case = TRUE))))
) %>%
dplyr::filter(sin_cuenta == "TRUE", sociedad_clean == "TRUE") %>% # excluidos porque interseccionan con sociedad y NO son gastronómicos (sirve de nada aparentemente)
dplyr::ungroup(),
radius = 5,
color = "magenta",
fillOpacity = 1,
stroke = FALSE,
popup = ~paste0("<strong>", name, "</strong><br><a href='", url_maps, "' target='_blank'>", url_maps, "</a>")
)
save.image(file = "googlemaps_request.RData")
library(tidyr)
library(leaflet)
library(stringr)
library(purrr)
library(httr)
library(jsonlite)
library(sf)
library(plotly)
library(RColorBrewer)
install.packages("leaflet")
library(tidyr)
library(leaflet)
library(stringr)
library(purrr)
library(httr)
library(jsonlite)
library(sf)
library(plotly)
library(RColorBrewer)
# manzanas (layer)
get_arcgis_services()
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(
data = manzanas_sf,
color = ~colorFactor(palette = "Set1", domain = manzanas_sf$objectid_1)(objectid_1),
weight = 2,
fillOpacity = 0.1
) %>%
addPolygons(
data = propiedad_horizontal,
color = "grey",
weight = 2,
fillOpacity = 0
) %>%
addCircleMarkers(
data = places_list_sf %>% # Places cercanos a un lugar restringido NO GASTRONOMICOS (en azul los que zafan de la clasificación en "sociedad_clean")
dplyr::filter(user_ratings_total > 3) %>%
dplyr::rowwise() %>%
dplyr::filter(
!(any(str_detect(types, regex("tourist_attraction|park|local_government_office|museum|school|church|place_of_worship", ignore_case = TRUE))) &
!any(str_detect(types, regex("store", ignore_case = TRUE))))
) %>%
dplyr::filter(sin_cuenta == "TRUE", sociedad_clean == "TRUE") %>%
dplyr::ungroup(),
radius = 5,
color = "blue",
fillOpacity = 1,
stroke = FALSE,
popup = ~paste0("<strong>", name, "</strong><br><a href='", url_maps, "' target='_blank'>", url_maps, "</a>")
) %>%
addCircleMarkers(
data = comercio_sf,
radius = 5,
color = "grey",
fillOpacity = 0.1,
stroke = FALSE,
popup = ~nombre_fantasia
) %>%
# %>%
#   addCircleMarkers(
#     data = places_list_sf %>% # Places cercanos a una cuenta comercial
#       dplyr::filter(user_ratings_total > 3) %>%
#       dplyr::rowwise() %>%
#       dplyr::filter(
#         !(any(str_detect(types, regex("tourist_attraction|park|local_government_office|museum|school|church|place_of_worship", ignore_case = TRUE))) &
#             !any(str_detect(types, regex("store", ignore_case = TRUE))))
#       ) %>%
#       dplyr::filter(sin_cuenta == "TRUE") %>%
#       dplyr::ungroup(),
#     radius = 5,
#     color = ~"green",  # Conditional color based on 'intersect'
#     fillOpacity = 1,
#     stroke = FALSE,
#     popup = ~paste0("<strong>", name, "</strong><br><a href='", url_maps, "' target='_blank'>", url_maps, "</a>")
#   )
# %>%
#   addCircleMarkers(
#     data = places_list_sf %>% # Places lejanos a una cuenta comercial
#       dplyr::filter(user_ratings_total > 3) %>%
#       dplyr::rowwise() %>%
#       dplyr::filter(
#         !(any(str_detect(types, regex("tourist_attraction|park|local_government_office|museum|school|church|place_of_worship", ignore_case = TRUE))) &
#             !any(str_detect(types, regex("store", ignore_case = TRUE))))
#       ) %>%
#       dplyr::filter(sin_cuenta == "FALSE", sociedad == "TRUE") %>%
#       dplyr::ungroup(),
#     radius = 5,
#     color = ~colorNumeric(palette = c("gold", "orange", "red", "brown"), domain = places_list_sf$dist)(dist),  # Conditional color based on 'intersect'
#     fillOpacity = 1,
#     stroke = FALSE,
#     popup = ~paste0("<strong>", name, "</strong><br><a href='", url_maps, "' target='_blank'>", url_maps, "</a>")
#   ) %>%
addCircleMarkers(
data = locaciones_restringidas,
radius = 5,
color = "magenta",
fillOpacity = 1,
stroke = FALSE,
popup = ~paste0(tipo, ": ", nombre)
) %>%
addCircleMarkers(
data = comercio_sf,
radius = 5,
color = "grey",
fillOpacity = 0.1,
stroke = FALSE,
popup = ~nombre_fantasia
)
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(
data = manzanas_sf,
color = ~colorFactor(palette = "Set1", domain = manzanas_sf$objectid_1)(objectid_1),
weight = 2,
fillOpacity = 0.1
) %>%
addPolygons(
data = propiedad_horizontal,
color = "grey",
weight = 2,
fillOpacity = 0
) %>%
addCircleMarkers(
data = places_list_sf %>% # Places cercanos a un lugar restringido NO GASTRONOMICOS (en azul los que zafan de la clasificación en "sociedad_clean")
dplyr::filter(user_ratings_total > 3) %>%
dplyr::rowwise() %>%
dplyr::filter(
!(any(str_detect(types, regex("tourist_attraction|park|local_government_office|museum|school|church|place_of_worship", ignore_case = TRUE))) &
!any(str_detect(types, regex("store", ignore_case = TRUE))))
) %>%
dplyr::filter(sin_cuenta == "TRUE", sociedad_clean == "TRUE") %>%
dplyr::ungroup(),
radius = 5,
color = "blue",
fillOpacity = 1,
stroke = FALSE,
popup = ~paste0("<strong>", name, "</strong><br><a href='", url_maps, "' target='_blank'>", url_maps, "</a>")
) %>%
addCircleMarkers(
data = comercio_sf,
radius = 5,
color = "grey",
fillOpacity = 0.1,
stroke = FALSE,
popup = ~nombre_fantasia
) %>%
# %>%
#   addCircleMarkers(
#     data = places_list_sf %>% # Places cercanos a una cuenta comercial
#       dplyr::filter(user_ratings_total > 3) %>%
#       dplyr::rowwise() %>%
#       dplyr::filter(
#         !(any(str_detect(types, regex("tourist_attraction|park|local_government_office|museum|school|church|place_of_worship", ignore_case = TRUE))) &
#             !any(str_detect(types, regex("store", ignore_case = TRUE))))
#       ) %>%
#       dplyr::filter(sin_cuenta == "TRUE") %>%
#       dplyr::ungroup(),
#     radius = 5,
#     color = ~"green",  # Conditional color based on 'intersect'
#     fillOpacity = 1,
#     stroke = FALSE,
#     popup = ~paste0("<strong>", name, "</strong><br><a href='", url_maps, "' target='_blank'>", url_maps, "</a>")
#   )
# %>%
#   addCircleMarkers(
#     data = places_list_sf %>% # Places lejanos a una cuenta comercial
#       dplyr::filter(user_ratings_total > 3) %>%
#       dplyr::rowwise() %>%
#       dplyr::filter(
#         !(any(str_detect(types, regex("tourist_attraction|park|local_government_office|museum|school|church|place_of_worship", ignore_case = TRUE))) &
#             !any(str_detect(types, regex("store", ignore_case = TRUE))))
#       ) %>%
#       dplyr::filter(sin_cuenta == "FALSE", sociedad == "TRUE") %>%
#       dplyr::ungroup(),
#     radius = 5,
#     color = ~colorNumeric(palette = c("gold", "orange", "red", "brown"), domain = places_list_sf$dist)(dist),  # Conditional color based on 'intersect'
#     fillOpacity = 1,
#     stroke = FALSE,
#     popup = ~paste0("<strong>", name, "</strong><br><a href='", url_maps, "' target='_blank'>", url_maps, "</a>")
#   ) %>%
addCircleMarkers(
data = locaciones_restringidas,
radius = 5,
color = "magenta",
fillOpacity = 1,
stroke = FALSE,
popup = ~paste0(tipo, ": ", nombre)
) %>%
addCircleMarkers(
data = comercio_sf,
radius = 5,
color = "grey",
fillOpacity = 0.1,
stroke = FALSE,
popup = ~nombre_fantasia
)
places_list_sf$sociedad
places_list_sf$dist_sociedad
places_list_sf$dist_sociedad
places_list_sf$phorizontal
places_list_sf$sin_cuenta
places_list_sf$sin_cuenta
locaciones_restringidas
parcelas <- get_arcgis_services(service = "Catastro_público", layer = 7, return_geojson = TRUE)
parcelas$segunda_sec <- check_point_intersections(geompoints = st_centroid(parcelas), buffers = secciones)
parcelas
parcelas <- parcelas %>% dplyr::filter(segunda_sec == "TRUE")
parcelas
get_arcgis_services(service = "Catastro_público")
parcelas
get_arcgis_services(service = "Catastro_público")
get_arcgis_services(service = "Catastro_público", layer = 0, return_geojson = TRUE)
parcelas <- get_arcgis_services(service = "Catastro_público", layer = 1, return_geojson = TRUE)
parcelas$segunda_sec <- check_point_intersections(geompoints = st_centroid(parcelas), buffers = secciones)
check_point_intersections(geompoints = st_centroid(propiedad_horizontal), buffers = secciones)
check_point_intersections(geompoints = st_centroid(parcelas), buffers = secciones)
parcelas$segunda_sec
st_centroid(parcelas)
check_point_intersections(geompoints = st_centroid(st_make_valid(parcelas)), buffers = secciones)
parcelas$segunda_sec <- check_point_intersections(geompoints = st_centroid(st_make_valid(parcelas)), buffers = secciones)
table(parcelas$segunda_sec)
parcelas <- parcelas %>% dplyr::filter(segunda_sec == "TRUE")
save.image(file = "googlemaps_request.RData")
