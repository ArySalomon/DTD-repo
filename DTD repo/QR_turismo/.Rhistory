#       dplyr::rowwise() %>%
#       dplyr::filter(
#         !(any(str_detect(types, regex("tourist_attraction|park|local_government_office|museum|school|church|place_of_worship", ignore_case = TRUE))) &
#             !any(str_detect(types, regex("store", ignore_case = TRUE))))
#       ) %>%
#       dplyr::filter(sin_cuenta == "FALSE", sociedad == "TRUE") %>%
#       dplyr::ungroup(),
#     radius = 5,
#     color = ~colorNumeric(palette = c("gold", "orange", "red", "brown"), domain = places_list_sf$dist)(dist),  # Conditional color based on 'intersect'
#     fillOpacity = 1,
#     stroke = FALSE,
#     popup = ~paste0("<strong>", name, "</strong><br><a href='", url_maps, "' target='_blank'>", url_maps, "</a>")
#   ) %>%
addCircleMarkers(
data = locaciones_restringidas,
radius = 5,
color = "magenta",
fillOpacity = 1,
stroke = FALSE,
popup = ~paste0(tipo, ": ", nombre)
) %>%
addCircleMarkers(
data = comercio_sf,
radius = 5,
color = "grey",
fillOpacity = 0.1,
stroke = FALSE,
popup = ~nombre_fantasia
)
places_list_sf <- places_list_sf %>% # solo los que interseccionan con sociedad y NO son gastronómicos, se marcan TRUE en "sociedad_clean"
dplyr::mutate(
gastronomico = str_detect(types, regex("food|restaurant|bar", ignore_case = TRUE)),
sociedad_clean = ifelse(sociedad == "TRUE" & gastronomico == "FALSE", "TRUE",
ifelse(sociedad == "TRUE" & gastronomico == "TRUE", "FALSE", "FALSE")
)
)
places_list_sf %>%
dplyr::filter(user_ratings_total > 3) %>%
dplyr::rowwise() %>%
dplyr::filter(
!(any(str_detect(types, regex("tourist_attraction|park|local_government_office|museum|school|church|place_of_worship", ignore_case = TRUE))) &
!any(str_detect(types, regex("store", ignore_case = TRUE))))
) %>%
dplyr::ungroup() %>% View()
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(
data = manzanas_sf,
color = ~colorFactor(palette = "Set1", domain = manzanas_sf$objectid_1)(objectid_1),
weight = 2,
fillOpacity = 0.1
) %>%
addPolygons(
data = propiedad_horizontal,
color = "grey",
weight = 2,
fillOpacity = 0
) %>%
addCircleMarkers(
data = places_list_sf %>% # Places cercanos a un lugar restringido NO GASTRONOMICOS (en azul los que zafan de la clasificación en "sociedad_clean")
dplyr::filter(user_ratings_total > 3) %>%
dplyr::rowwise() %>%
dplyr::filter(
!(any(str_detect(types, regex("tourist_attraction|park|local_government_office|museum|school|church|place_of_worship", ignore_case = TRUE))) &
!any(str_detect(types, regex("store", ignore_case = TRUE))))
) %>%
dplyr::filter(sin_cuenta == "TRUE", sociedad_clean == "TRUE") %>%
dplyr::ungroup(),
radius = 5,
color = "blue",
fillOpacity = 1,
stroke = FALSE,
popup = ~paste0("<strong>", name, "</strong><br><a href='", url_maps, "' target='_blank'>", url_maps, "</a>")
) %>%
addCircleMarkers(
data = comercio_sf,
radius = 5,
color = "grey",
fillOpacity = 0.1,
stroke = FALSE,
popup = ~nombre_fantasia
) %>%
# %>%
#   addCircleMarkers(
#     data = places_list_sf %>% # Places cercanos a una cuenta comercial
#       dplyr::filter(user_ratings_total > 3) %>%
#       dplyr::rowwise() %>%
#       dplyr::filter(
#         !(any(str_detect(types, regex("tourist_attraction|park|local_government_office|museum|school|church|place_of_worship", ignore_case = TRUE))) &
#             !any(str_detect(types, regex("store", ignore_case = TRUE))))
#       ) %>%
#       dplyr::filter(sin_cuenta == "TRUE") %>%
#       dplyr::ungroup(),
#     radius = 5,
#     color = ~"green",  # Conditional color based on 'intersect'
#     fillOpacity = 1,
#     stroke = FALSE,
#     popup = ~paste0("<strong>", name, "</strong><br><a href='", url_maps, "' target='_blank'>", url_maps, "</a>")
#   )
# %>%
#   addCircleMarkers(
#     data = places_list_sf %>% # Places lejanos a una cuenta comercial
#       dplyr::filter(user_ratings_total > 3) %>%
#       dplyr::rowwise() %>%
#       dplyr::filter(
#         !(any(str_detect(types, regex("tourist_attraction|park|local_government_office|museum|school|church|place_of_worship", ignore_case = TRUE))) &
#             !any(str_detect(types, regex("store", ignore_case = TRUE))))
#       ) %>%
#       dplyr::filter(sin_cuenta == "FALSE", sociedad == "TRUE") %>%
#       dplyr::ungroup(),
#     radius = 5,
#     color = ~colorNumeric(palette = c("gold", "orange", "red", "brown"), domain = places_list_sf$dist)(dist),  # Conditional color based on 'intersect'
#     fillOpacity = 1,
#     stroke = FALSE,
#     popup = ~paste0("<strong>", name, "</strong><br><a href='", url_maps, "' target='_blank'>", url_maps, "</a>")
#   ) %>%
addCircleMarkers(
data = locaciones_restringidas,
radius = 5,
color = "magenta",
fillOpacity = 1,
stroke = FALSE,
popup = ~paste0(tipo, ": ", nombre)
) %>%
addCircleMarkers(
data = comercio_sf,
radius = 5,
color = "grey",
fillOpacity = 0.1,
stroke = FALSE,
popup = ~nombre_fantasia
)
save.image(file = "googlemaps_request.RData")
library(tidyr)
library(leaflet)
library(stringr)
library(purrr)
library(httr)
library(jsonlite)
library(sf)
library(plotly)
library(RColorBrewer)
get_arcgis_services(service = "Sociedad_público")[c(4, 5, 6, 11, 12, 14, 16, 18, 19, 20, 22, 24, 26, 27, 28, 29, 31, 33, 34, 35, 41, 42, 43, 44, 45), ]$name
get_arcgis_services(service = "Sociedad_público")
get_arcgis_services(service = "Sociedad_público")[4]
get_arcgis_services(service = "Sociedad_público")[4, ]
get_arcgis_services(service = "Sociedad_público")
get_arcgis_services(service = "Sociedad_público")[4+1, ]
get_arcgis_services(service = "Sociedad_público")[c(4, 5, 6, 11, 12, 14, 16, 18, 19, 20, 22, 24, 26, 27, 28, 29, 31, 33, 34, 35, 41, 42, 43, 44, 45), ]$name
get_arcgis_services(service = "Sociedad_público")[c(4, 5, 6, 11, 12, 14, 16, 18, 19, 20, 22, 24, 26, 27, 28, 29, 31, 33, 34, 35, 41, 42, 43, 44, 45)+1, ]$name
get_arcgis_services(service = "Sociedad_público")[-c(4, 5, 6, 11, 12, 14, 16, 18, 19, 20, 22, 24, 26, 27, 28, 29, 31, 33, 34, 35, 41, 42, 43, 44, 45)+1, ]$name
get_arcgis_services(service = "Sociedad_público")[c(4, 5, 6, 11, 12, 14, 16, 18, 19, 20, 22, 24, 26, 27, 28, 29, 31, 33, 34, 35, 41, 42, 43, 44, 45)+1, ]$name
get_arcgis_services(service = "Sociedad_público")[c(4, 5, 6, 11, 12, 14, 16, 18, 19, 20, 22, 24, 26, 27, 28, 29, 31, 33, 34, 35, 41, 42, 43, 44, 45)+1, ]$name
get_arcgis_services(service = "Sociedad_público")[-c(4, 5, 6, 11, 12, 14, 16, 18, 19, 20, 22, 24, 26, 27, 28, 29, 31, 33, 34, 35, 41, 42, 43, 44, 45)+1, ]$name
c(4, 5, 6, 11, 12, 14, 16, 18, 19, 20, 22, 24, 26, 27, 28, 29, 31, 33, 34, 35, 41, 42, 43, 44, 45)+1
get_arcgis_services(service = "Sociedad_público")[-(c(4, 5, 6, 11, 12, 14, 16, 18, 19, 20, 22, 24, 26, 27, 28, 29, 31, 33, 34, 35, 41, 42, 43, 44, 45)+1), ]$name
get_arcgis_services(service = "Sociedad_público")[(c(4, 5, 6, 11, 12, 14, 16, 18, 19, 20, 22, 24, 26, 27, 28, 29, 31, 33, 34, 35, 41, 42, 43, 44, 45)+1), ]$name
get_arcgis_services(service = "Sociedad_público")
get_arcgis_services(service = "Sociedad_público")[(c(4, 5, 6, 11, 12, 14, 16, 19, 22, 24, 26, 27, 28, 29, 31, 33, 34, 35, 43)+1), ]$name
get_arcgis_services(service = "Sociedad_público")[(c(4, 5, 6, 11, 12, 14, 16, 19, 22, 24, 26, 27, 28, 29, 31, 33, 34, 35, 43)+1), ]$name
get_arcgis_services(service = "Sociedad_público")[(c(4, 5, 6, 11, 12, 14, 16, 19, 22, 24, 26, 27, 28, 29, 31, 33, 34, 35, 43)+1), ]$name
get_arcgis_services(service = "Sociedad_público")[-(c(4, 5, 6, 11, 12, 14, 16, 19, 22, 24, 26, 27, 28, 29, 31, 33, 34, 35, 43)+1), ]$name
rm(locaciones_restringidas)
rm(locaciones_restringidas, x)
for (x in (c(4, 5, 6, 11, 12, 14, 16, 19, 22, 24, 26, 27, 28, 29, 31, 33, 34, 35, 43)+1)) {
sociedad_new <- get_arcgis_services(service = "Sociedad_público", layer = x, return_geojson = TRUE)
if (x == 44) { # la capa 44 es la única que no tiene nombre. Entonces nombramos con domicilio
sociedad_new <- sociedad_new[which(colnames(sociedad_new) == "domicilio")]
colnames(sociedad_new) <- c("nombre", "geometry")
} else {
sociedad_new <- sociedad_new[which(colnames(sociedad_new) %in% c("nombre", "desc_full", "name", "clubes", "titular"))[1]]
colnames(sociedad_new) <- c("nombre", "geometry")
}
sociedad_new$tipo <- get_arcgis_services(service = "Sociedad_público")[x+1, ]$name
if (is.na(st_crs(sociedad_new))) {
sociedad_new <- st_transform(sociedad_new, crs = 4326)
}
if (!exists("locaciones_restringidas")) {
locaciones_restringidas <- sociedad_new
} else {
locaciones_restringidas <- rbind(locaciones_restringidas, sociedad_new)
}
}
sociedad_new <- sociedad_new[which(colnames(sociedad_new) == "domicilio")]
sociedad_new
colnames(sociedad_new)
x == 44
sociedad_new <- get_arcgis_services(service = "Sociedad_público", layer = x, return_geojson = TRUE)
x
get_arcgis_services(service = "Sociedad_público")[13, ]
get_arcgis_services(service = "Sociedad_público")[15, ]
x <- 14
sociedad_new <- get_arcgis_services(service = "Sociedad_público", layer = x, return_geojson = TRUE)
sociedad_new <- get_arcgis_services(service = "Sociedad_público", layer = 13)
sociedad_new
# Sociedad
get_arcgis_services()
get_arcgis_services(service = "Sociedad_público")
sociedad_new <- get_arcgis_services(service = "Sociedad_público", layer = 12, return_geojson = TRUE)
sociedad_new
sociedad_new <- get_arcgis_services(service = "Sociedad_público", layer = 13, return_geojson = TRUE)
get_arcgis_services(service = "Sociedad_público")
get_arcgis_services(service = "Sociedad_público")[(c(4, 5, 6, 11, 13, 14, 16, 19, 22, 24, 26, 27, 28, 29, 31, 33, 34, 35, 43)+1), ]$name
get_arcgis_services(service = "Sociedad_público")
get_arcgis_services(service = "Sociedad_público")[(c(4, 5, 6, 11, 13, 14, 16, 19, 24, 26, 27, 28, 29, 31, 33, 34, 35, 43)+1), ]$name
get_arcgis_services(service = "Sociedad_público")[(c(4, 5, 6, 11, 13, 14, 16, 19, 24, 26, 27, 28, 29, 31, 33, 34, 35, 43)+1), ]$name
get_arcgis_services(service = "Sociedad_público")
get_arcgis_services(service = "Sociedad_público")[(c(4, 5, 6, 11, 12, 14, 16, 19, 24, 26, 27, 28, 29, 31, 33, 34, 35, 43)+1), ]$name
get_arcgis_services(service = "Sociedad_público")[(c(4, 5, 6, 11, 12, 14, 16, 19, 24, 26, 27, 28, 29, 31, 33, 34, 35, 43)+1), ]$name
rm(locaciones_restringidas, x)
for (x in (c(4, 5, 6, 11, 12, 14, 16, 19, 24, 26, 27, 28, 29, 31, 33, 34, 35, 43)+1)) {
sociedad_new <- get_arcgis_services(service = "Sociedad_público", layer = x, return_geojson = TRUE)
if (x == 44) { # la capa 44 es la única que no tiene nombre. Entonces nombramos con domicilio
sociedad_new <- sociedad_new[which(colnames(sociedad_new) == "domicilio")]
colnames(sociedad_new) <- c("nombre", "geometry")
} else {
sociedad_new <- sociedad_new[which(colnames(sociedad_new) %in% c("nombre", "desc_full", "name", "clubes", "titular"))[1]]
colnames(sociedad_new) <- c("nombre", "geometry")
}
sociedad_new$tipo <- get_arcgis_services(service = "Sociedad_público")[x+1, ]$name
if (is.na(st_crs(sociedad_new))) {
sociedad_new <- st_transform(sociedad_new, crs = 4326)
}
if (!exists("locaciones_restringidas")) {
locaciones_restringidas <- sociedad_new
} else {
locaciones_restringidas <- rbind(locaciones_restringidas, sociedad_new)
}
}
get_arcgis_services(service = "Sociedad_público")
(c(4, 5, 6, 11, 12, 14, 16, 19, 24, 26, 27, 28, 29, 31, 33, 34, 35, 43)+1)
get_arcgis_services(service = "Sociedad_público")
x
get_arcgis_services(service = "Sociedad_público")[(c(4, 5, 6, 11, 12, 14, 16, 19, 24, 26, 27, 28, 29, 31, 33, 34, 35, 43)+1), ]$name
rm(locaciones_restringidas, x)
for (x in c(4, 5, 6, 11, 12, 14, 16, 19, 24, 26, 27, 28, 29, 31, 33, 34, 35, 43)) {
sociedad_new <- get_arcgis_services(service = "Sociedad_público", layer = x, return_geojson = TRUE)
if (x == 44) { # la capa 44 es la única que no tiene nombre. Entonces nombramos con domicilio
sociedad_new <- sociedad_new[which(colnames(sociedad_new) == "domicilio")]
colnames(sociedad_new) <- c("nombre", "geometry")
} else {
sociedad_new <- sociedad_new[which(colnames(sociedad_new) %in% c("nombre", "desc_full", "name", "clubes", "titular"))[1]]
colnames(sociedad_new) <- c("nombre", "geometry")
}
sociedad_new$tipo <- get_arcgis_services(service = "Sociedad_público")[x+1, ]$name
if (is.na(st_crs(sociedad_new))) {
sociedad_new <- st_transform(sociedad_new, crs = 4326)
}
if (!exists("locaciones_restringidas")) {
locaciones_restringidas <- sociedad_new
} else {
locaciones_restringidas <- rbind(locaciones_restringidas, sociedad_new)
}
}
unique(locaciones_restringidas$tipo)
# Arreglamos la capa "Gimnasios municipales" (polígonos)
locaciones_restringidas <- st_centroid(locaciones_restringidas)
locaciones_restringidas <- nearest_polygon(points_sf = locaciones_restringidas,
polygons_sf = manzanas_sf,
polygon_id_col = "objectid_1")
locaciones_restringidas
locaciones_restringidas$segunda_sec <- check_point_intersections(geompoints = locaciones_restringidas, buffers = secciones)
locaciones_restringidas <- locaciones_restringidas %>% dplyr::filter(segunda_sec == "TRUE")
locaciones_restringidas
locaciones_restringidas$segunda_sec
# Columna para indicar si tiene una locación restringida a 10 metros (solo se muestran ubicaciones de googlemaps gastronómicas)
places_list_sf$sociedad <- check_point_intersections(geompoints = places_list_sf, buffers = locaciones_restringidas, radius = 10)
places_list_sf <- places_list_sf %>% # solo los que interseccionan con sociedad y NO son gastronómicos, se marcan TRUE en "sociedad_clean"
dplyr::mutate(
gastronomico = str_detect(types, regex("food|restaurant|bar", ignore_case = TRUE)),
sociedad_clean = ifelse(sociedad == "TRUE" & gastronomico == "FALSE", "TRUE",
ifelse(sociedad == "TRUE" & gastronomico == "TRUE", "FALSE", "FALSE")
)
)
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(
data = manzanas_sf,
color = ~colorFactor(palette = "Set1", domain = manzanas_sf$objectid_1)(objectid_1),
weight = 2,
fillOpacity = 0.1
) %>%
addPolygons(
data = propiedad_horizontal,
color = "grey",
weight = 2,
fillOpacity = 0
) %>%
addCircleMarkers(
data = places_list_sf %>% # Places cercanos a un lugar restringido NO GASTRONOMICOS (en azul los que zafan de la clasificación en "sociedad_clean")
dplyr::filter(user_ratings_total > 3) %>%
dplyr::rowwise() %>%
dplyr::filter(
!(any(str_detect(types, regex("tourist_attraction|park|local_government_office|museum|school|church|place_of_worship", ignore_case = TRUE))) &
!any(str_detect(types, regex("store", ignore_case = TRUE))))
) %>%
dplyr::filter(sin_cuenta == "TRUE", sociedad_clean == "TRUE") %>%
dplyr::ungroup(),
radius = 5,
color = "blue",
fillOpacity = 1,
stroke = FALSE,
popup = ~paste0("<strong>", name, "</strong><br><a href='", url_maps, "' target='_blank'>", url_maps, "</a>")
) %>%
addCircleMarkers(
data = comercio_sf,
radius = 5,
color = "grey",
fillOpacity = 0.1,
stroke = FALSE,
popup = ~nombre_fantasia
) %>%
# %>%
#   addCircleMarkers(
#     data = places_list_sf %>% # Places cercanos a una cuenta comercial
#       dplyr::filter(user_ratings_total > 3) %>%
#       dplyr::rowwise() %>%
#       dplyr::filter(
#         !(any(str_detect(types, regex("tourist_attraction|park|local_government_office|museum|school|church|place_of_worship", ignore_case = TRUE))) &
#             !any(str_detect(types, regex("store", ignore_case = TRUE))))
#       ) %>%
#       dplyr::filter(sin_cuenta == "TRUE") %>%
#       dplyr::ungroup(),
#     radius = 5,
#     color = ~"green",  # Conditional color based on 'intersect'
#     fillOpacity = 1,
#     stroke = FALSE,
#     popup = ~paste0("<strong>", name, "</strong><br><a href='", url_maps, "' target='_blank'>", url_maps, "</a>")
#   )
# %>%
#   addCircleMarkers(
#     data = places_list_sf %>% # Places lejanos a una cuenta comercial
#       dplyr::filter(user_ratings_total > 3) %>%
#       dplyr::rowwise() %>%
#       dplyr::filter(
#         !(any(str_detect(types, regex("tourist_attraction|park|local_government_office|museum|school|church|place_of_worship", ignore_case = TRUE))) &
#             !any(str_detect(types, regex("store", ignore_case = TRUE))))
#       ) %>%
#       dplyr::filter(sin_cuenta == "FALSE", sociedad == "TRUE") %>%
#       dplyr::ungroup(),
#     radius = 5,
#     color = ~colorNumeric(palette = c("gold", "orange", "red", "brown"), domain = places_list_sf$dist)(dist),  # Conditional color based on 'intersect'
#     fillOpacity = 1,
#     stroke = FALSE,
#     popup = ~paste0("<strong>", name, "</strong><br><a href='", url_maps, "' target='_blank'>", url_maps, "</a>")
#   ) %>%
addCircleMarkers(
data = locaciones_restringidas,
radius = 5,
color = "magenta",
fillOpacity = 1,
stroke = FALSE,
popup = ~paste0(tipo, ": ", nombre)
) %>%
addCircleMarkers(
data = comercio_sf,
radius = 5,
color = "grey",
fillOpacity = 0.1,
stroke = FALSE,
popup = ~nombre_fantasia
)
locaciones_restringidas
locaciones_restringidas$segunda_sec
check_point_intersections(geompoints = locaciones_restringidas, buffers = secciones)
locaciones_restringidas$segunda_sec <- check_point_intersections(geompoints = locaciones_restringidas, buffers = secciones)
locaciones_restringidas <- locaciones_restringidas %>% dplyr::filter(segunda_sec == "TRUE")
for (x in c(4, 5, 6, 11, 12, 14, 16, 19, 24, 26, 27, 28, 29, 31, 33, 34, 35, 43)) {
sociedad_new <- get_arcgis_services(service = "Sociedad_público", layer = x, return_geojson = TRUE)
if (x == 44) { # la capa 44 es la única que no tiene nombre. Entonces nombramos con domicilio
sociedad_new <- sociedad_new[which(colnames(sociedad_new) == "domicilio")]
colnames(sociedad_new) <- c("nombre", "geometry")
} else {
sociedad_new <- sociedad_new[which(colnames(sociedad_new) %in% c("nombre", "desc_full", "name", "clubes", "titular"))[1]]
colnames(sociedad_new) <- c("nombre", "geometry")
}
sociedad_new$tipo <- get_arcgis_services(service = "Sociedad_público")[x+1, ]$name
if (is.na(st_crs(sociedad_new))) {
sociedad_new <- st_transform(sociedad_new, crs = 4326)
}
if (!exists("locaciones_restringidas")) {
locaciones_restringidas <- sociedad_new
} else {
locaciones_restringidas <- rbind(locaciones_restringidas, sociedad_new)
}
}
rm(locaciones_restringidas, x)
for (x in c(4, 5, 6, 11, 12, 14, 16, 19, 24, 26, 27, 28, 29, 31, 33, 34, 35, 43)) {
sociedad_new <- get_arcgis_services(service = "Sociedad_público", layer = x, return_geojson = TRUE)
if (x == 44) { # la capa 44 es la única que no tiene nombre. Entonces nombramos con domicilio
sociedad_new <- sociedad_new[which(colnames(sociedad_new) == "domicilio")]
colnames(sociedad_new) <- c("nombre", "geometry")
} else {
sociedad_new <- sociedad_new[which(colnames(sociedad_new) %in% c("nombre", "desc_full", "name", "clubes", "titular"))[1]]
colnames(sociedad_new) <- c("nombre", "geometry")
}
sociedad_new$tipo <- get_arcgis_services(service = "Sociedad_público")[x+1, ]$name
if (is.na(st_crs(sociedad_new))) {
sociedad_new <- st_transform(sociedad_new, crs = 4326)
}
if (!exists("locaciones_restringidas")) {
locaciones_restringidas <- sociedad_new
} else {
locaciones_restringidas <- rbind(locaciones_restringidas, sociedad_new)
}
}
# Arreglamos la capa "Gimnasios municipales" (polígonos)
locaciones_restringidas <- st_centroid(locaciones_restringidas)
check_point_intersections(geompoints = locaciones_restringidas, buffers = secciones)
locaciones_restringidas$segunda_sec <- check_point_intersections(geompoints = locaciones_restringidas, buffers = secciones)
locaciones_restringidas <- locaciones_restringidas %>% dplyr::filter(segunda_sec == "TRUE")
locaciones_restringidas <- nearest_polygon(points_sf = locaciones_restringidas,
polygons_sf = manzanas_sf,
polygon_id_col = "objectid_1")
# Columna para indicar si tiene una locación restringida a 10 metros (solo se muestran ubicaciones de googlemaps gastronómicas)
places_list_sf$sociedad <- check_point_intersections(geompoints = places_list_sf, buffers = locaciones_restringidas, radius = 10)
places_list_sf <- places_list_sf %>% # solo los que interseccionan con sociedad y NO son gastronómicos, se marcan TRUE en "sociedad_clean"
dplyr::mutate(
gastronomico = str_detect(types, regex("food|restaurant|bar", ignore_case = TRUE)),
sociedad_clean = ifelse(sociedad == "TRUE" & gastronomico == "FALSE", "TRUE",
ifelse(sociedad == "TRUE" & gastronomico == "TRUE", "FALSE", "FALSE")
)
)
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(
data = manzanas_sf,
color = ~colorFactor(palette = "Set1", domain = manzanas_sf$objectid_1)(objectid_1),
weight = 2,
fillOpacity = 0.1
) %>%
addPolygons(
data = propiedad_horizontal,
color = "grey",
weight = 2,
fillOpacity = 0
) %>%
addCircleMarkers(
data = places_list_sf %>% # Places cercanos a un lugar restringido NO GASTRONOMICOS (en azul los que zafan de la clasificación en "sociedad_clean")
dplyr::filter(user_ratings_total > 3) %>%
dplyr::rowwise() %>%
dplyr::filter(
!(any(str_detect(types, regex("tourist_attraction|park|local_government_office|museum|school|church|place_of_worship", ignore_case = TRUE))) &
!any(str_detect(types, regex("store", ignore_case = TRUE))))
) %>%
dplyr::filter(sin_cuenta == "TRUE", sociedad_clean == "TRUE") %>%
dplyr::ungroup(),
radius = 5,
color = "blue",
fillOpacity = 1,
stroke = FALSE,
popup = ~paste0("<strong>", name, "</strong><br><a href='", url_maps, "' target='_blank'>", url_maps, "</a>")
) %>%
addCircleMarkers(
data = comercio_sf,
radius = 5,
color = "grey",
fillOpacity = 0.1,
stroke = FALSE,
popup = ~nombre_fantasia
) %>%
# %>%
#   addCircleMarkers(
#     data = places_list_sf %>% # Places cercanos a una cuenta comercial
#       dplyr::filter(user_ratings_total > 3) %>%
#       dplyr::rowwise() %>%
#       dplyr::filter(
#         !(any(str_detect(types, regex("tourist_attraction|park|local_government_office|museum|school|church|place_of_worship", ignore_case = TRUE))) &
#             !any(str_detect(types, regex("store", ignore_case = TRUE))))
#       ) %>%
#       dplyr::filter(sin_cuenta == "TRUE") %>%
#       dplyr::ungroup(),
#     radius = 5,
#     color = ~"green",  # Conditional color based on 'intersect'
#     fillOpacity = 1,
#     stroke = FALSE,
#     popup = ~paste0("<strong>", name, "</strong><br><a href='", url_maps, "' target='_blank'>", url_maps, "</a>")
#   )
# %>%
#   addCircleMarkers(
#     data = places_list_sf %>% # Places lejanos a una cuenta comercial
#       dplyr::filter(user_ratings_total > 3) %>%
#       dplyr::rowwise() %>%
#       dplyr::filter(
#         !(any(str_detect(types, regex("tourist_attraction|park|local_government_office|museum|school|church|place_of_worship", ignore_case = TRUE))) &
#             !any(str_detect(types, regex("store", ignore_case = TRUE))))
#       ) %>%
#       dplyr::filter(sin_cuenta == "FALSE", sociedad == "TRUE") %>%
#       dplyr::ungroup(),
#     radius = 5,
#     color = ~colorNumeric(palette = c("gold", "orange", "red", "brown"), domain = places_list_sf$dist)(dist),  # Conditional color based on 'intersect'
#     fillOpacity = 1,
#     stroke = FALSE,
#     popup = ~paste0("<strong>", name, "</strong><br><a href='", url_maps, "' target='_blank'>", url_maps, "</a>")
#   ) %>%
addCircleMarkers(
data = locaciones_restringidas,
radius = 5,
color = "magenta",
fillOpacity = 1,
stroke = FALSE,
popup = ~paste0(tipo, ": ", nombre)
) %>%
addCircleMarkers(
data = comercio_sf,
radius = 5,
color = "grey",
fillOpacity = 0.1,
stroke = FALSE,
popup = ~nombre_fantasia
)
save.image(file = "googlemaps_request.RData")
